<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="SideFX::toonsimple" orbolt="True" label="Toon Simple" icon="SideFX__toonsimple-icon.png">
    <helpText><![CDATA[Install or download the Toon Simple Orbolt digital asset.]]></helpText>
    <helpURL>http://www.orbolt.com/asset/SideFX::toonsimple</helpURL>
    <script scriptType="python"><![CDATA[import shelfutils
shelfutils.installOrboltAsset(kwargs, "SideFX::toonsimple", "http://www.orbolt.com/asset/SideFX::toonsimple")]]></script>
  </tool>

  <toolshelf name="gui2one" label="gui2one">
    <memberTool name="null_OUT"/>
    <memberTool name="dof_null"/>
    <memberTool name="dof_null_V2"/>
    <memberTool name="extract_planes"/>
    <memberTool name="CHOP_clean"/>
    <memberTool name="find reference"/>
    <memberTool name="cop_load_captures"/>
    <memberTool name="HtoAE"/>
    <memberTool name="obj_export"/>
    <memberTool name="view_paint"/>
    <memberTool name="freeze_curve_edit"/>
    <memberTool name="shader_preview"/>
    <memberTool name="place_obj"/>
  </toolshelf>

  <tool name="null_OUT" label="null_OUT" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import sys

if(hou.selectedNodes().__len__() > 0):

    sel = hou.selectedNodes()[0]
    #print sel.outputs()
else:
    hou.ui.displayMessage("Select a node")
    # if selection is empty exit the tool
    sys.exit()
    

#print sel.children()   

nullNode = sel.parent().createNode("null")
nullNode.setName("OUT", True)
nullNode.setColor(hou.Color((1.0,0.0,0.0)))



for conn in sel.outputConnections():
    index = conn.inputIndex()
    outputNode = conn.outputNode()
    outputNode.setInput(index,nullNode)
    #print outputNode.name
  
nullNode.insertInput(0,sel)    

nullNode.moveToGoodPosition()

#nullNode.setDisplayFlag(1)
#nullNode.setRenderFlag(1)
#nullNode.setTemplateFlag(1)]]></script>
  </tool>

  <tool name="dof_null" label="dof_null" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[if hou.selectedNodes().__len__() > 0 : 
    c = hou.selectedNodes()[0]
    if c.type().name() == "cam" :
        root = c.parent()
        nullNode = root.createNode("null")
        nullNode.setName(c.name() + "_dof_null")
        nullNode.setPosition((c.position()[0], c.position()[1]-0.6))
        nullNode.parm("dcolorr").set(0.9)
        nullNode.parm("dcolorg").set(0.9)
        nullNode.parm("dcolorb").set(0.0)
        
        nullNode.parm("controltype").set(4)
        
        #################
        chopnet = root.createNode("chopnet")
        chopnet.setName(c.name()+"_chopnet")
        chopnet.setPosition((c.position()[0], c.position()[1]-1.1))
        nullObjNode = chopnet.createNode("object")
        nullObjNode.setName("dof_null_position")
        nullObjNode.parm("targetpath").set(nullNode.path())
        
        camObjNode = chopnet.createNode("object")
        camObjNode.setName("cam_position")
        camObjNode.parm("targetpath").set(c.path())        
        
        exp = 'distance('
        exp += 'chop("'+ camObjNode.path()+'/tx"),'
        exp += 'chop("'+ camObjNode.path()+'/ty"),'
        exp += 'chop("'+ camObjNode.path()+'/tz"),'        
        exp += 'chop("'+ nullObjNode.path()+'/tx"),'
        exp += 'chop("'+ nullObjNode.path()+'/ty"),'
        exp += 'chop("'+ nullObjNode.path()+'/tz"))'
        c.parm("focus").setExpression(exp)
        #print nullNode
    else :
        hou.ui.displayMessage("select a camera node")        
else :
    hou.ui.displayMessage("select a camera")
]]></script>
  </tool>

  <tool name="tool_1" label="New Tool" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import sys
sys.path.append("F:/HOUDINI_CONFIG/python")

import load_captures

load_captures.main()]]></script>
  </tool>

  <tool name="extract_planes" label="extract_planes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[s = hou.selectedNodes()[0]
root = s.parent()

def findLights():
    lightPlanes = []
    print "Find Lights Function ----"
    for i in range(nPlanes):
        plane = s.planes()[i]
    
        ### if it's an "light" plane
        if plane.find("obj_") != -1:
            lightPlanes.append(plane)
            
    print len(lightPlanes), "Light Planes"
    
    nameArray = []
    
    for lightPlane in lightPlanes:
        lightName = lightPlane.split("_")[1]
        if not lightName in nameArray:
            nameArray.append(lightName)    

    return nameArray
            
            
            
myPlanes = ()
nPlanes = len(s.planes())
print nPlanes


lights = findLights()
colors = []
colors.append(hou.Color((255,0,0)))
colors.append(hou.Color((0,255,0)))
colors.append(hou.Color((0,0,255)))
colors.append(hou.Color((255,255,0)))

inc = 0
for light in lights:
    nodes = []
    for plane in s.planes():
        if plane.find(light) != -1 and plane.find("coat") == -1  and plane.find("reflect") == -1:
            extract = root.createNode("gui2one_COP_extract_channel")
            nodes.append(extract)
            extract.setInput(0,s)
            extract.setColor(colors[inc % 4])
            extract.parm("plane_name").set(plane)
            extract.setName(light +"__"+ plane.split("_")[2] + "__" +plane.split("_")[3])
            
    inc += 1
    
    
    for i in range(len(nodes)-1):
        addNode = root.createNode("add")
        
        if i == 0:
            addNode.setInput(0,nodes[i])
            addNode.setInput(1,nodes[i+1])
            oldAdd = addNode
        else:
            addNode.setInput(0, oldAdd    )
            addNode.setInput(1,nodes[i+1])
            oldAdd = addNode

inc = 0
for light in lights:
    nodes = []
    for plane in s.planes():
        if plane.find(light) != -1 :
            if plane.find("coat") != -1 or plane.find("reflect") != -1:
                extract = root.createNode("gui2one_COP_extract_channel")
                nodes.append(extract)
                extract.setInput(0,s)
                extract.setColor(colors[inc % 4])
                extract.parm("plane_name").set(plane)
                extract.setName(light +"__"+ plane.split("_")[2] + "__" +plane.split("_")[3])
            
    inc += 1
    
    
    for i in range(len(nodes)-1):
        addNode = root.createNode("add")
        
        if i == 0:
            addNode.setInput(0,nodes[i])
            addNode.setInput(1,nodes[i+1])
            oldAdd = addNode
        else:
            addNode.setInput(0, oldAdd    )
            addNode.setInput(1,nodes[i+1])
            oldAdd = addNode            
       ]]></script>
  </tool>

  <tool name="CHOP_clean" label="CHOP_clean" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()

inc = 0

for node in nodes :
    parm = node.parm("export")
    
    if parm.eval() != "":
        parm.set("")        
        inc += 1

print(str(inc) +" Chop node(s) Export prefix parm  cleaned")        
   
    ]]></script>
  </tool>

  <tool name="find reference" label="find reference" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import sys


inc = 0
paramsCounter = 0
nuggetsFound = []

r = hou.ui.readInput("node name to search :")
#r = (0,"OUT_oriented_tree_wires")
searchTarget = r[1]


if searchTarget != '' :
    rDomain = hou.ui.selectNode()

    print rDomain
    try :
        test = hou.node(rDomain).allSubChildren()
    except:
        print "problem"
        #sys.exit(0)
        
    for nd in hou.node(rDomain).allSubChildren() :
        for parm in nd.parms():
            paramsCounter += 1
            try:
                strParam = str(nd.evalParm(parm.path()))
                #print strParam
            except:
                #print "problem !!!!"
                strParam = ""
            if strParam.find(searchTarget)!= -1 :
                nuggetsFound.append(nd)
        inc+= 1
        
print ("%s nodes, %s paramters, %s nugget found" % (inc,paramsCounter,len(nuggetsFound)))
for nd in nuggetsFound :
    print (nd.path())

    

]]></script>
  </tool>

  <tool name="cop_load_captures" label="cop load captures" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[]]></script>
  </tool>

  <tool name="HtoAE" label="HtoAE" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[# This script exports Houdini objects to Adobe After Effects 8.x
# A .jsx file will be created
# You can run it as a script in AE
# ver 0.01 Andrew V.K.

import toolutils
import hou 
import string
import math

minFrame = 2000
maxFrame = 0

fileName = ""
viewer = toolutils.sceneViewer()
objsel = viewer.selectObjects("Select objects and press Enter",
        use_existing_selection=False,
        allow_multisel = True,
        quick_select=True,
        allowed_types = ('cam','hlight','null','geo','subnet'))

for obj in objsel:
    name = obj.name()
    objType = obj.type().name()
    if objType == 'cam':

        fileName = obj.name() + ".jsx"
        parmsList = ["tx","ty","tz","rx","ry","rz"]
        
        for parmString in parmsList:
            if obj.parm(parmString).keyframes().__len__() != 0:
                firstKey = obj.parm(parmString).keyframes()[0]
                lastKey =  obj.parm(parmString).keyframes()[obj.parm(parmString).keyframes().__len__()-1]
                
                if firstKey.frame() < minFrame: 
                
                    minFrame = firstKey.frame()
                    
                if lastKey.frame() > maxFrame: 
                
                    maxFrame = lastKey.frame()
                    
                
                
                
    #print "FirstFrame -->", minFrame, " --- lastFrame --> ", maxFrame       
    hou.playbar.setPlaybackRange(minFrame, maxFrame)      


dir = hou.expandString('$HIP')
hip = hou.expandString('$HIPNAME')
dirpath = dir + '/geo/cam_export'
fname = hou.ui.selectFile( start_directory = dirpath,
        default_value = fileName,
        file_type = hou.fileType.Any,
        collapse_sequences = False,
        multiple_select = False,
        image_chooser   = False)
if not fname.endswith('.jsx'):
        fname = fname + '.jsx'
fp = open(fname,'w')

fps = hou.fps()
#duration = hou.expandString('$TLENGTH')
duration = (float(maxFrame) / hou.fps()) - (float(minFrame-1) / hou.fps())

print "Duration : ", duration * hou.fps()
fend = string.atoi(hou.expandString('$RFEND'))
fstart = string.atoi(hou.expandString('$RFSTART'))
firstCam = 0
objCamera = []
objLight = []
objNull = []

for obj in objsel:
    name = obj.name()
    objType = obj.type().name()
    if objType == 'cam':
        resx = obj.parm('resx').eval()
        resy = obj.parm('resy').eval()
        aspect = obj.parm('aspect').eval()
        aperture = obj.parm('aperture').eval()
        focal = obj.parm('focal').eval()
        fovx = 2 * math.atan((aperture/2)/focal) 
        zoom = ((resx/2)/math.tan(fovx/2))
        if firstCam == 0:
                objCamera.append('var myItemCollection = app.project.items;\n')
                objCamera.append('var myComp = myItemCollection.addComp("'+name+'"'+','+`resx`+','+`resy`+','+`aspect`+','+str(duration)+','+`fps`+');\n')
                objCamera.append('var SceneScaleNull = myComp.layers.addNull();\n')
                objCamera.append('SceneScaleNull.threeDLayer = true;\n')
                objCamera.append('SceneScaleNull.name = "Scene Scale";\n')
                objCamera.append('SceneScaleNull.property("Position").setValue([0.0,0.0,0.0]);\n')
                objCamera.append('SceneScaleNull.enabled = false;\n')
                firstCam = 1
        objCamera.append('var '+name+' = myComp.layers.addCamera("'+name+'",[0,0]);\n')
        objCamera.append(name+'.autoOrient = AutoOrientType.NO_AUTO_ORIENT;\n')
        objCamera.append(name+'.property("Zoom").setValue('+`zoom`+');\n') 
        objCamera.append(name+'.parent = SceneScaleNull;\n')
    elif objType == 'hlight':
        lighttype = obj.parm('light_type').eval()
        intensity = obj.parm('light_intensity').eval()
        cr = obj.parm('light_colorr').eval()
        cg = obj.parm('light_colorg').eval()
        cb = obj.parm('light_colorb').eval()
        coneangle = obj.parm('coneangle').eval()
        shadow = obj.parm('shadow_type').eval()
        objLight.append('var '+name+' = myComp.layers.addLight("'+name+'",[0,0]);\n')
        objLight.append(name+'.autoOrient = AutoOrientType.NO_AUTO_ORIENT;\n')
        objLight.append(name+'.property("Intensity").setValue('+`intensity*100`+');\n') 
        objLight.append(name+'.property("Color").setValue(['+`cr`+','+`cg`+','+`cb`+']);\n') 
        if shadow > 0:
                objLight.append(name+'.property("castsShadows").setValue(1);\n') 
        if lighttype == 1:
                objLight.append(name+'.property("coneAngle").setValue('+`coneangle`+');\n') 
        objLight.append(name+'.parent = SceneScaleNull;\n')
    else:
        objNull.append('var '+name+' = myComp.layers.addNull()\n')
        objNull.append(name+'.threeDLayer = true;\n') 
        objNull.append(name+'.name = "'+name+'";\n')
        objNull.append(name+'.parent = SceneScaleNull;\n')

if firstCam == 0:
        fp.write('var myItemCollection = app.project.items;\n')
        fp.write('var myComp = myItemCollection.addComp("Camera1",640,480,1,%s,%s);\n'%(duration,fps))
        fp.write('var myCamera = myComp.layers.addCamera("Camera1",[0,0]);\n')
        fp.write('myCamera.autoOrient = AutoOrientType.NO_AUTO_ORIENT;\n')
        fp.write('var SceneScaleNull = myComp.layers.addNull();\n')
        fp.write('SceneScaleNull.threeDLayer = true;\n')
        fp.write('SceneScaleNull.name = "Scene Scale";\n')
        fp.write('SceneScaleNull.property("Position").setValue([0.0,0.0,0.0]);\n')
        fp.write('SceneScaleNull.enabled = false;\n')
        fp.write('myCamera.parent = SceneScaleNull;\n')
for x in objCamera:
   fp.write('%s'%x)
for x in objLight:
   fp.write('%s'%x)
for x in objNull:
   fp.write('%s'%x)

i = fstart
while i <= fend:
        hou.setFrame(i)
        ftime = hou.frameToTime(i)
        for obj in objsel:
            name = obj.name()
            objType = obj.type().name()
            wtm = obj.worldTransform()
            objt = wtm.extractTranslates("srt")
            tx = objt.__getitem__(0)
            ty = objt.__getitem__(1) * -1
            tz = objt.__getitem__(2) * -1
            objr = wtm.extractRotates("srt","zyx")
            rx = objr.__getitem__(0)
            ry = objr.__getitem__(1) * -1
            rz = objr.__getitem__(2) * -1
            fp.write('%s.property("X Rotation").setValueAtTime(%f,%f);\n'%(name,ftime,rx)) 
            fp.write('%s.property("Y Rotation").setValueAtTime(%f,%f);\n'%(name,ftime,ry)) 
            fp.write('%s.property("Z Rotation").setValueAtTime(%f,%f);\n'%(name,ftime,rz)) 
            fp.write('%s.property("Position").setValueAtTime(%f,[%f,%f,%f]);\n'%(name,ftime,tx,ty,tz)) 
            if (objType == 'cam') and (len(obj.parm('focal').keyframes()) != 0):
                resx = obj.parm('resx').eval()
                resy = obj.parm('resy').eval()
                aspect = obj.parm('aspect').eval()
                aperture = obj.parm('aperture').eval()
                focal = obj.parm('focal').eval()
                fovx = 2 * math.atan((aperture/2)/focal) 
                zoom = ((resx/2)/math.tan(fovx/2))
                fp.write('%s.property("Zoom").setValueAtTime(%f,%f);\n'%(name,ftime,zoom)) 
            if objType == 'hlight':
                if len(obj.parm('light_intensity').keyframes()) != 0:
                   intensity = obj.parm('light_intensity').eval()
                   fp.write('%s.property("Intensity").setValueAtTime(%f,%f);\n'%(name,ftime,intensity*100)) 
                if len(obj.parm('coneangle').keyframes()) != 0:
                   coneangle = obj.parm('coneangle').eval()
                   fp.write('%s.property("coneAngle").setValueAtTime(%f,%f);\n'%(name,ftime,coneangle)) 
                kr = len(obj.parm('light_colorr').keyframes())
                kg = len(obj.parm('light_colorg').keyframes())
                kb = len(obj.parm('light_colorb').keyframes())
                if (kr != 0) or (kg != 0) or (kb != 0):
                   cr = obj.parm('light_colorr').eval()
                   cg = obj.parm('light_colorg').eval()
                   cb = obj.parm('light_colorb').eval()
                   fp.write('%s.property("Color").setValueAtTime(%f,[%f,%f,%f]);\n'%(name,ftime,cr,cg,cb)) 
            if (objType == 'geo') or (objType == 'null') or (objType == 'subnet'):
                objs = wtm.extractScales("srt")
                sx = objs.__getitem__(0)
                sy = objs.__getitem__(1)
                sz = objs.__getitem__(2)
                fp.write('%s.property("Scale").setValueAtTime(%f,[%f,%f,%f]);\n'%(name,ftime,sx,sy,sz)) 
        i = i + 1
fp.close()
hou.setFrame(fstart)
        ]]></script>
  </tool>

  <toolshelf name="CYCLES_utils" label="CYCLES_utils">
    <memberTool name="obj_export"/>
    <memberTool name="scene_export"/>
    <memberTool name="add_parms"/>
  </toolshelf>

  <tool name="scene_export" label="scene_export" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import math
import sys

sys.path.append('F:/HOUDINI_CONFIG/python/cycles_export')
import cycles_export as cy
reload(cy)

fileName = hou.ui.selectFile('name for exported file')

selection = hou.selectedNodes()

sceneString = ''
camNodes = []
lightNodes = []
objDict = {} 

for obj in selection :
    if obj.type().name() == 'cam':
        camNodes.append(obj)
    
        if len(camNodes) > 1 : 
            hou.ui.displayMessage("more than 1 camera is selected.\n Select only one camera.")
            sys.exit(0)

    elif obj.type().name() == 'hlight::2.0' :
        print 'this is a light !!!!!'
        lightNodes.append(obj)
        
        
    elif obj.type().name() == 'geo':
        objDict[obj] = obj.name()
    elif obj.type().name() == 'subnet':
        for child in obj.children():
            if child.type().name() == 'geo':   
                objDict[child] = obj.name()+"__"+child.name()             
                
sceneString = '<cycles>\n'
sceneString += '<camera width="640" height="360" />\n'   

for cam in camNodes:
    sceneString += cy.writeTransformsStart(cam)
    sceneString += cy.writeCamera(cam)
    sceneString += cy.writeTransformsEnd()    

    
    
sceneString += cy.writeBackgroundShader()

sceneString += cy.writeDefaultShader()

for light in lightNodes:
    sceneString += cy.writeLight(light)


for item in objDict:
    sceneString += cy.writeShader(item, objDict[item])
    sceneString += cy.writeTransformsStart(item)
    sceneString += cy.writeObject(objDict[item])
    sceneString += cy.writeTransformsEnd()   
    
sceneString += '</cycles>'
#print sceneString

f = open(fileName,"w")
f.write(sceneString)
f.close()



]]></script>
  </tool>

  <tool name="add_parms" label="add_parms" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[selection = hou.selectedNodes()



objNodes = []
for obj in selection :
    
    if obj.type().name() == 'geo':
        objNodes.append(obj)
        
    elif obj.type().name() == 'subnet':
        for child in obj.children():
            if child.type().name() == 'geo': 
                objNodes.append(child)     
                
                
for obj in objNodes:
    try:   
        group = obj.parmTemplateGroup()        
        foldToDelete = group.findFolder("Cycles")     
        print foldToDelete
        group.remove(foldToDelete)
        obj.setParmTemplateGroup(group)
    except:
        print 'no folder to remove'
    
    
    group = obj.parmTemplateGroup()
    
    folder = hou.FolderParmTemplate("cycles", "Cycles")
    
    menuTemplate = hou.MenuParmTemplate('bsdf1','BSDF 1',("diffuse","glossy"), default_value=0)
    folder.addParmTemplate(menuTemplate)        
    
    folder.addParmTemplate(hou.FloatParmTemplate("color1", "Color1",
                                                    3,
                                                    naming_scheme=hou.parmNamingScheme.RGBA,
                                                    look=hou.parmLook.ColorSquare,
                                                    default_value=(1.0,1.0,1.0)
                                                    ))
    floatTemplate = hou.FloatParmTemplate("roughness1", "Roughness1",1)
    floatTemplate.setDefaultValue((0.2,))
    folder.addParmTemplate( floatTemplate )
 
    
    menuTemplate = hou.MenuParmTemplate('bsdf2','BSDF 2',("diffuse","glossy"), default_value=1)
    folder.addParmTemplate(menuTemplate)        
    
    folder.addParmTemplate(hou.FloatParmTemplate("color2", "Color2",
                                                    3,
                                                    naming_scheme=hou.parmNamingScheme.RGBA,
                                                    look=hou.parmLook.ColorSquare,
                                                    default_value=(1.0,1.0,1.0)
                                                    ))
    floatTemplate = hou.FloatParmTemplate("roughness2", "Roughness2",1)
    floatTemplate.setDefaultValue((0.2,))
    folder.addParmTemplate( floatTemplate )    
    
    
    group.append(folder)
    obj.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="obj_export" label="obj_export" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[folderPath = hou.ui.selectFile(title = "choose a folder")

selection = hou.selectedNodes()

objNodes = []
objDict = {}
for obj in selection :
    if obj.type().name() == 'geo':
        objNodes.append(obj)
        objDict[obj] = obj.name()
    elif obj.type().name() == 'subnet':
        for child in obj.children():
            if child.type().name() == 'geo': 
                objNodes.append(child)     
                objDict[child] = obj.name()+"__"+child.name()                
                
                
for item in objDict:
    obj = item
    print obj
#for obj in objNodes:
for item in objDict:
    obj = item
    objName = objDict[item]


    sopNode = obj.displayNode()
    geo = sopNode.geometry()  
    fileName = folderPath+objName+".xml"
    ptPosString = ''
    ptUvString = ''
    for pt in geo.points():
        pt_x = pt.position()[0]
        pt_y = pt.position()[1]
        pt_z = pt.position()[2]
        
        strToAdd = ('%s %s %s' %(pt_x*-1, pt_y, pt_z))
        ptPosString += strToAdd   
        ptPosString += "  "
        
#        pt_uvs = pt.attribValue("uv")
#        pt_uv_x = pt_uvs[0]
#        pt_uv_y = pt_uvs[1]
#        pt_uv_z = pt_uvs[2]
#        
#        ptUvString += ('%s %s %s' %(1-pt_uv_x, 1-pt_uv_y,0.0)) 
#        ptUvString += "  "    
        
        
    nvertsString = ''
    vertsString = ''
    
    for prim in geo.prims():
        nvertsString += str(len(prim.vertices()))+ " "
        for vert in prim.vertices():
            vertsString += str(vert.point().number())+" "
        vertsString += "  "
    
    strExport =  '<?xml version="1.0" ?>\n'
    strExport += '<cycles>\n'
    strExport += '<mesh P='
    strExport += ('"%s"' % ptPosString)
#    strExport += (' UV="%s"' % ptUvString)
    strExport += (' nverts="%s"' % nvertsString)
    
    strExport += (' verts="%s"' % vertsString)
    strExport += '/>\n'
    strExport += '</cycles>'
    

    f = open(("%s" % (fileName)),"w")
    f.write(strExport)
    f.close()
    
    print ("Export Succeeded for %s"% (objName))]]></script>
  </tool>

  <tool name="view_paint" label="view_paint" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[desk =  hou.ui.curDesktop()

cam = hou.node('/obj/').createNode('cam')
cam.setName('paint_camera')

sceneViewer = None
for paneTab in desk.paneTabs():
    type = paneTab.type()
    
    if str(type) == "paneTabType.SceneViewer" :
        sceneViewer = paneTab
        break
        
viewport = sceneViewer.curViewport()

viewport.saveViewToCamera(cam)
viewport.setCamera(cam)

    ]]></script>
  </tool>

  <tool name="freeze_curve_edit" label="freeze_curve_edit" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import sys

selection = hou.selectedNodes()
if selection.__len__() == 0:
    hou.ui.displayMessage("select a edit sop node")
    sys.exit(0)

#print 'selected node : ',selection[0].name()
#print selection[0].inputs()[0].parm('coords').evalAsString()
geo = selection[0].geometry()

pointsString = ''

for point in geo.points():
    pointsString += '%s,%s,%s ' % (point.position()[0], point.position()[1], point.position()[2])
    
#print pointsString

recursiveInputs =  selection[0].inputAncestors()

for node in recursiveInputs:
    if node.type().name() == 'curve':
        curveNode = node
        break

if curveNode != None:
    #print 'curve Node is --> ', curveNode
    #newCurveNode = curveNode.parent().createNode('curve')
    curveNode.parm('coords').set(pointsString)
    
selection[0].destroy()]]></script>
  </tool>

  <tool name="shader_preview" label="shader preview" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>SHOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[

selected = hou.selectedNodes()[0]

nodeType = selected.type().name()


typeOk = False
if nodeType.find("octane") != -1:
    typeOk = True
else:
    typeOk = False

    
print "typeOk : ", typeOk


### delete existing shaderBall_scene
try : 
    hou.node("/obj/gui2one_shaderball_scene1/").destroy()
except:
    pass
    
if typeOk:
    shaderScene = hou.node('/obj').createNode('gui2one_shaderball_scene')
    shaderScene.parm("shop_materialpath_shell").set(selected.path())
    
    shaderScene.parm("show_params_button").pressButton()
    
    shaderScene.parm("openIPR").pressButton()]]></script>
  </tool>

  <tool name="dof_null_V2" label="DOF V2" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[if hou.selectedNodes().__len__() == 1:
    selectedNode = hou.selectedNodes()[0]
    if selectedNode.type().name() == 'cam' :
        cam = selectedNode
        
        if cam.parm('dof_target') == None :
            group = cam.parmTemplateGroup()
            
            template = hou.StringParmTemplate('dof_target','dof target',1)
            template.setStringType(hou.stringParmType.NodeReference)
            
            trans= group.findFolder('Transform')
            group.insertBefore(trans,template)
            
            cam.setParmTemplateGroup(group)
        
            

        nullNode = cam.parent().createNode('null')
        nullNode.setName('dof_null_'  + cam.name())
        nullNode.setPosition( cam.position() - hou.Vector2(0,1))
        nullNode.parmTuple('dcolor').set((0.8,0,0))
        nullNode.parm("geoscale").set(0.3)
        nullNode.parm("displayicon").set(2)
        nullNode.parm("controltype").set(5)        
        nullNode.parm("shadedmode").set(1)            
        
        cam.parm('dof_target').set(nullNode.path())
        
        expr = 'cam = hou.node(".")'
        expr +='\ncamPos = cam.worldTransform().extractTranslates()'
        expr +='\ndofNull = hou.node(cam.parm("dof_target").evalAsString())'
        expr +='\nif dofNull:'
       
        expr +='\n\tdofNullPos = dofNull.worldTransform().extractTranslates()'        
        expr +='\n\treturn camPos.distanceTo(dofNullPos)'    
        expr += '\nelse:'
        expr +='\n\treturn 5.0'
        expr +='\n'
      
        
        cam.parm('focus').setExpression(expr,language=hou.exprLanguage.Python)

        
    else:
        hou.ui.displayMessage("select a camera node")
else:
    hou.ui.displayMessage("select only one camera node")]]></script>
  </tool>

  <tool name="place_obj" label="Place Obj" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()[0]

for pane in hou.ui.curDesktop().panes():
    for tab in pane.tabs():
        if tab.type() == hou.paneTabType.SceneViewer :

            sceneViewer = tab
            break
    
newPos = sceneViewer.selectPositions()[0]

sel.parm("tx").set(newPos.x())
sel.parm("ty").set(newPos.y())
sel.parm("tz").set(newPos.z())]]></script>
  </tool>

  <shelfSetEdit name="shelf_set_1" fileLocation="C:/PROGRA~1/SIDEEF~1/HOUDIN~1.632/houdini/toolbar\ShelfDefinitions.shelf">
    <addMemberToolshelf name="octane" inPosition="13"/>
    <addMemberToolshelf name="gui2one" inPosition="14"/>
  </shelfSetEdit>
</shelfDocument>
